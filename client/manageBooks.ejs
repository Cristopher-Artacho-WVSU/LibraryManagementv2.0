<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add a Book!</title>

    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Montserrat:wght@700&display=swap">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    
    <link rel="stylesheet" href="/signup_style.css">
    <link rel="stylesheet" href="/manage_style.css">
    <link rel="stylesheet" href="/librarianbookmanagement_style.css">
    <style>

    </style>
</head>
<body>
    <img class="background">
    <!-- NAV BAR -->
    <div class="navbar">
        <h1>Manage Books</h1>
        <div class="logout">
            <img id="profilePicture">
            <a href='/Edubook.com/login'>Log out</a>
        </div>
    </div>
    <div id="blurBackground" class="hideContent"></div>

<!-- THE DIV ITSELF FOR THE SIDEBAR -->
<div class="sidebar" id="sidebar">
        
    <li onmouseenter="toggleSubMenu()" onmouseleave="hideSubMenu()" id="subMenuIndicator">
        <!-- IF THE MOUSE ENTERS THE RANGE OF THE LINE ABOVE, IT WILL TRIGGER THE SUBMENU -->
        <div class="subMenu" id="subMenuDiv"></div>
    </li>   
</div>
<!-- CLICK THIS TO TOGGLE THE SIDEBAR -->
<div class="menu-toggle" onclick="toggleSidebar()">
    <i class="fas fa-bars thin-menu-icon"></i>
</div>
    <div class="managebtn">
        <button id="addBookButton">Add Book</button>
        <button>Edit Books</button>
        <button>Delete Books</button>
    </div>

    <div id="addBookDiv" class="hideContent">
    <h1 id="AddBookTag">Add Book</h1>
    <form id="addBookForm">

        <label for="title">Title:</label>
        <input type="text" id="title" name="title"><br><br>

        <label for="author">Author:</label>
        <input type="text" id="author" name="author"><br><br>

        <label for="date">Date:</label>
        <input type="text" id="date" name="date"><br><br>

        <label for="genre">Genre:</label>
        <input type="text" id="genre" name="genre"><br><br>

        <label for="copies">Copies Owned:</label>
        <input type="text" id="copies" name="copies"><br><br>

        <label for="fileInput">Book Photo:</label>
        <div id="image_container">
            <img src="" alt="Book Image" id="picture" width="300" height="500">
        </div>
        <input type="file" id="fileInput" name="image" accept="image/*" single>


        <button type="submit">Confirm</button>
        <button type="button" id="cancelButton">Cancel</button>
    </form>
</div>

<table class="manage_table">
    <thead>
        <th>Book ID</th>
        <th>Book Title</th>
        <th>Total Copies</th>
        <th>Copies Available</th>
        <th>Copies Borrowed</th>
        <th>Last Edited By:</th>
    </thead>
    <tbody id="bookTableData"></tbody>
</table>
    <script>
    document.getElementById("profilePicture").src = localStorage.getItem("profilePicture")

    // MAKING THE addBookForm VISIBLE
    document.getElementById('addBookButton').addEventListener('click', function(){
        document.getElementById('blurBackground').classList.remove('hideContent');
        document.getElementById('addBookDiv').classList.remove('hideContent');
        setTimeout(() => {
            document.getElementById('blurBackground').classList.add('showContent');
            document.getElementById('addBookDiv').classList.add('showContent');
        }, 10)
    });
    // MAKING THE addBookForm INVISIBLE
    document.getElementById('cancelButton').addEventListener('click', function() {
        document.getElementById('blurBackground').classList.remove('showContent');
        document.getElementById('addBookDiv').classList.remove('showContent');
        setTimeout(() => {
            document.getElementById('blurBackground').classList.add('hideContent');
        document.getElementById('addBookDiv').classList.add('hideContent');
        }, 300)
    });

    //IF THERE IS A CHANGE IN THE VALUE OF FILEINPUT, IMAGERELOAD() IS TRIGGERED
    window.onload = function() {
        document.getElementById('fileInput').addEventListener('change', imageReload);
    }
    //FUNCTION FOR READING THE BOOK PATH
    function imageReload(){
        const image = document.getElementById('fileInput').files[0]; //GETS THE VALUE AS AN OBJECT
        const reader = new FileReader();  //RETURNS A FILEREADER OBJECT
        reader.onload = function () {
            picture = reader.result; //FILE CONTENTS
        }
        reader.readAsDataURL(image); //RETURNS THE FILE DATA
    }
//         // SCRIPT FOR SIDEBAR
//     function toggleSidebar() {
//       var sidebar = document.getElementById("sidebar");
//       sidebar.classList.toggle('active');
//     }

//     function toggleSubMenu() {
//       var subMenu = document.getElementById("librarianSubMenu");
//       subMenu.classList.toggle('active');
//     }

//     function hideSubMenu() {
//     var subMenu = document.getElementById("librarianSubMenu");
//     subMenu.classList.remove('active'); // Add inactive class to hide submenu
//     subMenu.classList.add('inactive')
// }
    function generateBookID() {
        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
        const length = 6;
        let result = '';
        for (let i = 0; i < length; i++) {
            const randomIndex = Math.floor(Math.random() * characters.length);
            result += characters.charAt(randomIndex);
        }
        return result;
    }
        document.getElementById('addBookForm').addEventListener('submit', addBook) 
function addBook() {
    // event.preventDefault();
            //TAKES IN ALL THESE ARGUMENTS
            const book_id = generateBookID();
            const title = document.getElementById('title').value;
            const author = document.getElementById('author').value;
            const date = document.getElementById('date').value;
            const copies = parseInt(document.getElementById('copies').value); 
            const genre = document.getElementById('genre').value.split(',').map(item => item.trim());
            const image = document.getElementById('fileInput').files[0];
            const copies_available =  parseInt(document.getElementById('copies').value); 
            const copies_borrowed = 0;
            const reader = new FileReader();
            console.log(image)
            reader.readAsDataURL(image);
            reader.onload = function () {
                const picture = reader.result;
            }
            const edited_by = localStorage.getItem("accountId")
            

            //CREATES THE JSON FILE
            const book = {book_id, title, author, date, copies, genre, picture, copies_available, copies_borrowed, edited_by};
            

            
            fetch('/database/books', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
                body: JSON.stringify(book)
            })
            .then(response => {
                return response.json();
            })
            .then(data => {
                console.log('Book added successfully:', data);
                alert('Book added successfully!');
                window.href
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Failed to add book. Please try again.');
            });
}



document.addEventListener("DOMContentLoaded", function(){
    console.log('beginning adding the data to table')
    fetch('/database/books')
    .then(response => {
        console.log('fetched successfully');
        return response.json(); // Return the parsed JSON data
    })
    .then(data => {
        data.forEach(field => {
            createBookDataTable(
                field.book_id,
                field.title,
                field.copies,
                field.copies_available,
                field.copies_borrowed,
                field._id,
                field.edited_by
            );
            console.log('Passed through the createAccountDataTable function')
        });
    })
    .catch(error => {
        console.error('Error fetching accounts:', error);
        throw new Error('Error Fetching accounts');
    });
});
async function createBookDataTable(bookId, bookTitle, bookTotalCopies, bookCopiesAvailable, bookCopiesBorrowed, _id, edited_by){
    const currentlyBorrowedCopies =  await checkBookAvailability(bookId);
    const currentlyAvailableCopies = bookTotalCopies - currentlyBorrowedCopies;
    
    const librarianFullName =  await getFullNameByHandleId(edited_by)
    
    const bookCellData = document.getElementById("bookTableData")
    const tableRow = document.createElement("tr");

    tableRow.innerHTML =`
    <td>${bookId}</td>
    <td>${bookTitle}</td>
    <td>${bookTotalCopies}</td>
    <td>${currentlyAvailableCopies}</td>
    <td>${currentlyBorrowedCopies}</td>
    <td>${librarianFullName}</td>`;

    patchBookData(_id, currentlyAvailableCopies, currentlyBorrowedCopies)
    bookCellData.append(tableRow)


//     const response = await fetch('/database/books', {
//     method: 'PATCH',
//     headers: {
//         'Content-Type': 'application/json',
//     },
//     body: JSON.stringify({
//         copies_available: currentlyAvailableCopies,
//         copies_borrowed: currentlyBorrowedCopies
//     }),
// });

// if (!response.ok) {
//     throw new Error('Network response was not ok');
// }

// const data = await response.json();
// console.log('Book Updated:', data);
}

async function checkBookAvailability(bookId) {
    const response = await fetch(`/database/requests?book_id=${bookId}`, {
        method: 'GET'
    });

    if (!response.ok) {
        console.log('Could not establish a connection to the requests');
        return 0; // Return 0 or handle the error as needed
    }

    const data = await response.json();

    // Filter and count the statuses "Accepted" or "Pending" for the specific book ID
    const count = data.filter(request => 
        request.book_id === bookId && 
        (request.request_status === 'Accepted' || request.request_status === 'Pending')
    ).length;

    return count;
}

async function patchBookData(bookId, copiesAvailable, copiesBorrowed) {
    try {
        const response = await fetch(`/database/books/${bookId}`, {
            method: 'PATCH',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                copies_available: copiesAvailable,
                copies_borrowed: copiesBorrowed
            }),
        });

        if (!response.ok) {
            throw new Error('Network response was not ok');
        }

        const data = await response.json();
        console.log('Book Updated:', data);
        return true;
    } catch (error) {
        console.error('Error updating book data:', error);
        return false;
    }
}
    // CREDENTIALS
    // const username = sessionStorage.getItem("username");
    // document.getElementById("username").textContent = username;
    // const profile_picture = sessionStorage.getItem("profile_picture");
    // document.getElementById("profile_picture").src = profile_picture;

    // SCRIPT FOR SIDEBAR
    function toggleSidebar() {
        var sidebar = document.getElementById("sidebar");
        sidebar.classList.toggle('active');
    }
    // SCRIPT FOR THE SUBMENU SIDEBAR
    function toggleSubMenu() {
        var subMenu = document.getElementById("subMenuDiv");
        subMenu.classList.toggle('active');
    }
    // FUNCTION FOR HIDING THE SUBMENU
    function hideSubMenu() {
    var subMenu = document.getElementById("subMenuDiv");
    subMenu.classList.remove('active'); 
    subMenu.classList.add('inactive')
    }

    document.addEventListener("DOMContentLoaded", function() {
    const accountPermissions = localStorage.getItem("accountType");

    const sidebar = document.getElementById('sidebar');
    const subMenuDiv = document.getElementById('subMenuDiv');

    const userLinks = [
        { text: 'Book Catalogue', href: '/EduBook.com/book-catalogue' },
        { text: 'Profile', href: '/EduBook.com/profile' },
        { text: 'Dashboard', href: '/EduBook.com/dashboard' },
        { text: 'Book Inventory', href: '/EduBook.com/book-inventory' },
    ];

    const userSubMenuLinks = [
        { text: 'Pending Requests', href: '/EduBook.com/pending-requests' },
        { text: 'History Requests', href: '/EduBook.com/history-requests' },
    ];

    const librarianLinks = [
        { text: 'Manage Accounts', href: '/EduBook.com/manage-accounts' },
        { text: 'Manage Books', href: '/EduBook.com/manage-books' },
        { text: 'Dashboard', href: '/EduBook.com/dashboard' },
        { text: 'Profile', href: '/EduBook.com/profile' },
    ];

    const librarianSubMenuLinks = [
        { text: 'Pending Requests', href: '/EduBook.com/pending-requests' },
        { text: 'History Requests', href: '/EduBook.com/history-requests' },
    ];

    let linksToAdd = [];
    let subMenuLinksToAdd = [];

    if (accountPermissions === 'User') {
        linksToAdd = userLinks;
        subMenuLinksToAdd = userSubMenuLinks;
    } else if (accountPermissions === 'Librarian') {
        linksToAdd = librarianLinks;
        subMenuLinksToAdd = librarianSubMenuLinks;
    }

    linksToAdd.forEach(link => {
        const div = document.createElement('div');
        const a = document.createElement('a');
        a.href = link.href;
        a.textContent = link.text;
        div.appendChild(a);
        sidebar.appendChild(div);
    });

    subMenuLinksToAdd.forEach(link => {
        const div = document.createElement('div');
        const a = document.createElement('a');
        a.href = link.href;
        a.textContent = link.text;
        div.appendChild(a);
        subMenuDiv.appendChild(div);
    });
});

async function getFullNameByHandleId(handled_by){
    const response = await fetch(`/database/accounts?account_id=${handled_by}`, {
        method: 'GET'
    });
    if(!response.ok){
        console.log('Could not establish a connection to the accounts', handled_by);
        return 'Could not fetch the Full Name';
    }

    const accountData = await response.json();

    const fullName = accountData.find(accountparam => accountparam.account_id === handled_by);
    if (fullName){
        const {
            last_name,
            given_name
        } = fullName;
        return given_name + " " + last_name;
    }
    else{
        return 'Could not fetch the Full Name';
    }
}


    </script>
</body>
</html>