<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Manage Accounts</title>

    <style>
        /* FOR THE accountForm */
        #addAccountFormDiv{
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            padding: 20px;
            background-color: white;
            border: 1px solid #ccc;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            width: 300px;
            z-index: 2;
            transition: opacity 0.3s ease, transform 0.3s ease;
            opacity: 0;
            transform: translate(-50%, -40%);
        }
        #addAccountFormDiv.showContent {
            opacity: 1;
            transform: translate(-50%, -50%);
        }
        #addAccountForm input{
            width: 100%;
            padding: 5px;
            margin-bottom: 5px;
        }
        #addAccountForm input[type="file"]{
            margin-top: 10px;
        }
        /* FOR THE WHOLE WEBPAGE */
        #blurBackground{
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            backdrop-filter: blur(5px);
            z-index: 1;
            transition: opacity 0.3s ease;
            opacity: 0;
        }
        #blurBackground.showContent{
            opacity: 1;
        }
        .hideContent{
            display: none;
        }

        /* FOR THE READONLY INPUTS */
        #accountRoleValues {
        display: none;
        position: absolute;
        background-color: #f9f9f9;
        min-width: 200px;
        max-height: 200px;
        overflow-y: auto;
        border: 1px solid #ccc;
        z-index: 3;
    }

    #accountRoleValues p {
        display: block;
        padding: 5px 10px;
        text-decoration: none;
        color: #333;
        cursor: pointer;
    }


    </style>
</head>
<body> 
    <div id="blurBackground" class="hideContent"></div>

    <button id="addAccountButton">Add Librarian/User</button>

    <div id="addAccountFormDiv" class="hideContent">
        <form id="addAccountForm">
            <label for="accountUsername">Username:</label>
            <input type="text" id="accountUsername" name="username" required>

            <label for="accountPassword">Password:</label>
            <input type="password" id="accountPassword" name="password" required>
            
            <label for="accountLastName">Last Name:</label>
            <input type="text" id="accountLastName" name="lastName" required>
            
            <label for="accountGivenName">Given Name:</label>
            <input type="text" id="accountGivenName" name="givenName" required>
            
            <label for="accountEmailAddress">Email Address:</label>
            <input type="text" id="accountEmailAddress" name="emailAddress" required>
            
            <label for="accountContactNumber">Contact Number:</label>
            <input type="text" id="accountContactNumber" name="contactNumber" required>
            
            <label for="accountAddress">Address</label>
            <input type="text" id="accountAddress" name="address" required>
            
            <label for="accountRole">Account Type:</label>
            <input type="text" id="accountRole" name="accountType" required readonly onclick="toggleAccountRoleContent()">
            <div id="accountRoleValues">
                <p onclick="setAccountRole('Librarian')">Librarian</p>
                <p onclick="setAccountRole('User')">User</p>
            </div>

            <label for="accountProfilePicture">Profile Picture:</label>
            <input type="file" id="accountProfilePicture" name="profilePicture" required> 

            <button type="submit">Submit</button>
            <button type="button" id="cancelForm">Cancel</button>
        </form>
    </div>

    <script>
        document.getElementById('addAccountButton').addEventListener('click', function(){
            document.getElementById('blurBackground').classList.remove('hideContent');
            document.getElementById('addAccountFormDiv').classList.remove('hideContent');
            setTimeout(() => {
                document.getElementById('blurBackground').classList.add('showContent');
                document.getElementById('addAccountFormDiv').classList.add('showContent');
            }, 10)
        });
        // FOR HIDING THE addAccountFormDiv
        document.getElementById('cancelForm').addEventListener('click', function() {
            document.getElementById('blurBackground').classList.remove('showContent');
            document.getElementById('addAccountFormDiv').classList.remove('showContent');
            setTimeout(() => {
                document.getElementById('blurBackground').classList.add('hideContent');
            document.getElementById('addAccountFormDiv').classList.add('hideContent');
            }, 300)
        });
        // TOGGLING THE VISIBILITY FOR THE accountRoleValues DIV ON OR OFF
        function toggleAccountRoleContent() {
            var accountRoleContent = document.getElementById('accountRoleValues');
            if (accountRoleContent.style.display === "block") {
                accountRoleContent.style.display = "none";
            } else {
                accountRoleContent.style.display = "block";
            }
        }
        // ADDING THE CHOSEN VALUE TO THE accountRole INPUT 
        function setAccountRole(value) {
            document.getElementById('accountRoleValues').style.display = "none";
            document.getElementById('accountRole').value = value;
        }
        // ALLOWING TO HIDE THE DIV WHEN CLICKED OUTSIDE
        window.onclick = function(event) {
            if (!event.target.matches('#accountRole')) {
                var accountRoleContent = document.getElementById('accountRoleValues');
                if (accountRoleContent.style.display === "block") {
                    accountRoleContent.style.display = "none";
                }
            }
        }
        // GENERATING A RANDOM 6-DIGIT ALPHANUMERIC FOR USER ID
        function generateUserID() {
            const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
            const length = 6;
            let result = '';
            for (let i = 0; i < length; i++) {
                const randomIndex = Math.floor(Math.random() * characters.length);
                result += characters.charAt(randomIndex);
            }
            return result;
        }

        //VALIDATION FOR USER INPUTS
        function validateInputs(username, password, verifyPassword, lastName, givenName, emailAddress, contactNumber){
            if (password !== verifyPassword) {
            alert("Passwords do not match");
            throw new Error('Passwords do not match');
            }
            if (!emailAddress.endsWith('.com')) {
                alert("Email address not valid")
                throw new Error('Email address must end with ".com".');
            }
            if (!contactNumber.startsWith('0') || contactNumber.length != 11){
                alert("Contact Number incorrect")
                throw new Error('Contact Number should start with a zero and is exactly 11 digits in total')
            }
            if (username.includes(' ')){
                alert("Username is incorrect")
                throw new Error('Username contains whitespaces')
                return;
            }
            if (givenName.charAt(0) !== givenName.charAt(0).toUpperCase()){
                alert("First letter must be capital")
                throw new Error('First Name First Letter is not Capital')
                return;
            }
            if (lastName.charAt(0) !== lastName.charAt(0).toUpperCase()){
                throw new Error('Last Name First Letter is not Capital')
            }
        }

        //FUNCTION TO CHECK USERNAME DUPLICATE
        async function checkUsernameExists(username) {
            const response = await fetch('/database/participants', {
                method: 'GET'
            });
            if (!response.ok) {
                throw new Error('Unable to connect to participants collection');
            }
            const usersData = await response.json();
            const duplicateUser = usersData.find(account => account.username === username);
            if (duplicateUser) {
                return true;
            }
        }
    //IF THERE IS A CHANGE IN THE VALUE OF FILEINPUT, IMAGERELOAD() IS TRIGGERED
    window.onload = function() {
        document.getElementById('accountProfilePicture').addEventListener('change', imageReload);
    }
    //FUNCTION FOR READING THE BOOK PATH
        function imageReload(){
        const image = document.getElementById('accountProfilePicture').files[0]; //GETS THE VALUE AS AN OBJECT
        const reader = new FileReader();  //RETURNS A FILEREADER OBJECT
        reader.onload = function () {
            profilePicture = reader.result; //FILE CONTENTS
        }
        alert('addedProfilePicture')
        reader.readAsDataURL(image); //RETURNS THE FILE DATA
    }
        
        //IMAGE PARSER
        //SPLITTING ADDRESS

        // FOR ADDING THE ACCOUNT INTO THE DATABASE
        document.getElementById('addAccountForm').addEventListener('submit', async function(){
            // FROM THE RANDOMIZER
            const userID = generateUserID();
            // ALL THE VALUES FROM THE FORM
            const username = document.getElementById("accountUsername").value;
            const password = document.getElementById("accountPassword").value;
            const lastName = document.getElementById("accountLastName").value;
            const givenName = document.getElementById("accountGivenName").value;
            const emailAddress = document.getElementById("accountEmailAddress").value;
            const contactNumber = document.getElementById("accountContactNumber").value;
            const address = document.getElementById("accountAddress").value;
            const accountType = document.getElementById("accountRole").value;
            const image = document.getElementById('accountProfilePicture').files[0];
            
            // CHECKING IF USERNAME HAS A DUPLICATE
            const usernameExists = await checkUsernameExists(username);
            if (usernameExists) {
                alert('Username already exists. Please choose a different username.');
                return;
            }
            //FILEREADER ADD ON
            // const reader = new FileReader();
            // reader.readAsDataURL(image);
            // reader.onload = function () {
            //     const picture = reader.result;
            // }

            const accountData = {
                userID,
                username,
                password,
                lastName,
                givenName,
                emailAddress,
                address,
                contactNumber,
                accountType,
                ProfilePicture
            }

            fetch('/database/accounts', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(accountData)
            })
            .then(response => {
                if (!response.ok){
                    throw new Error('Failed to add the account data to the participants collection')
                }
                return response.json();
            })
            .then(data => {
                console.log('Added the account data to participants collection')
                window.location.href = "/library-management-system/manage-participants"
            })
        })

    </script>
</body>

</html>